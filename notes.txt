//Stmts:
//StringLiteral(String),
//Expr(Expr),                     // Expression statement
//Assign(Expr, Expr),           // Assignment statement: variable refernce, expression to assign to
//VarDecl(String, VarType),       // Variable declaration statement
//GlobVarDecl(String, VarType),       // Variable declaration statement
//If(Expr, Box<Stmt>, Option<Box<Stmt>>),  // If statement: condition, body, optional else body
//For(Rc<Stmt>, Expr, Box<Stmt>),          // For statement: assignment, condition, Box of commands for statement
//Block(Vec<Stmt>),               // Block statement: list of statements
//Error(Reporting),
//Return(Expr),
//Program(String, Box<Stmt>, Box<Stmt>), //The program AST: Name, the statements
//Procedure(VarType, String, Box<Stmt>, Box<Stmt>, Box<Stmt>), //Procedure AST: type, Name, parameter, Header, body

//Exprs:
////Literals
//IntLiteral(i64),                            //An integer literal (int value)
//FloatLiteral(f64),                          //A float literal (float value)
//StringLiteral(String),                      //A string literal (the string)
//BoolLiteral(bool),
//IntArrayLiteral(i32, Vec<i64>),             //An integer array literal
//
////References
//VarRef(String),                             //A reference to a variable (variable name)
//ProcRef(String, Option<Vec<Expr>>),         //Procedure calls: the name of the procedure, an optional box of a Block of Exprs for the parameters 
//ArrayRef(String, Box<Expr>),                //A reference to an array index (array name, Box of the index value)
//                                        //                               This is a box because it can be an intliteral or BinOp
//
////Operations
//ArthOp(Box<Expr>, Operator, Box<Expr>),     //An arthmetic Operation, (Operand 1, an instance of the BinOp enum, Operand 2)
//                                        //                      These are boxes because they can contain more BinOps within themselves     
//RelOp(Box<Expr>, Operator, Box<Expr>),      //A relational operation (operand 1, operator (<, >, etc.), operand 2) 
//LogOp(Box<Expr>, Operator, Box<Expr>),      //Operator for logical/bitwise equations (op1, operator (&, |, !), op2)

